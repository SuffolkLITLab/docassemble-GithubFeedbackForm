modules:
  - .feedback_on_server
---
objects:
  - red: DARedis
---
mandatory: True
code: |
  feedback_type
  if feedback_type == 'reactions':
    reaction_summary
  elif feedback_type == 'separate_interview':
    feedback_id
    feedback_info
---
event: feedback_info
question: Feedback Info
subquestion: |
  ## Body
  ${ id_map[feedback_id]['body'] }

  ## Github URL
  ${ id_map[feedback_id]['html_url'] }

  ## Session ID
  ${ id_map[feedback_id]['interview'] }:${ id_map[feedback_id]['session_id'] }

  ${ action_button_html(url_action('open_session'), label='Open Session', color='secondary') }
---
event: reaction_summary
question: |
  Reaction Summary
subquestion: |
  ## Reactions
  % for reaction in get_good_or_bad():
  * ${ reaction }
  % endfor

  ## Text Feedback
  % for feedback in [info for row_id, info in id_map.items() if not info.get('session_id')]:
  * "${ feedback['body'] }", on ${ feedback['interview'] }
  % endfor
---
metadata:
  title: Browse Interview Feedback
  short title: Browse Feedback
  temporary session: True
  required privileges:
    - admin
---
if: ids
id: main browse screen
question: |
  Select feedback to browse
fields:
  - What type of feedback: feedback_type
    datatype: dropdown
    choices:
      Reactions: reactions
      User-initiated: separate_interview
  - Feedback Session: feedback_id
    datatype: dropdown
    choices:
      code: |
        ids
    show if:
      variable: feedback_type
      is: separate_interview
help:
  label: |
    View Panelists
  content: |
    ${ view_panelists }
---
template: view_panelists
content: |
    % for email_and_time in potential_panelists():
    % if isinstance(email_and_time[0], bytes):
    * ${ email_and_time[0].decode('utf-8') }, at ${ email_and_time[1]}
    % else:
    * ${ str(panelist_email) }, at ${ email_and_time[1]}
    % endif
    % endfor
---
if: not ids
question: |
  No feedback to view
event: feedback_id
help:
  label: |
    View Panelists
  content: |
    ${ view_panelists }
---
code: |
  id_map = get_all_feedback_info()
---
code: |
  ids = {row_id: info['html_url'] if info.get('html_url') else info.get('session_id') 
      for row_id, info in id_map.items() if info.get('session_id')}
---
event: open_session
code: |
  info = id_map[feedback_id]
  response(url=interview_url(i=info['interview'], session=info['session_id'], temporary=1))
