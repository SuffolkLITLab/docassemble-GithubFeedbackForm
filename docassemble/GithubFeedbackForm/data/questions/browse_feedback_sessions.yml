modules:
  - .feedback_on_server
  - .github_issue
---
include:
  - docassemble.ALToolbox:collapse_template.yml
---
mandatory: True
code: |
  feedback_type
  if feedback_type == 'reviews':
    review_summary
  elif feedback_type == 'github_sessions':
    feedback_id
    feedback_info
---
event: feedback_info
question: Feedback Info
subquestion: |
  [Github URL](${ id_map[feedback_id]['html_url'] })

  ## Body
  ${ id_map[feedback_id]['body'] }

  % if id_map[feedback_id].get('session_id'):
  ## Session ID
  ${ id_map[feedback_id]['interview'] }:${ id_map[feedback_id].get('session_id') }

  ${ action_button_html(url_action('open_session'), label='Open Session', color='secondary') }
  % endif

---
event: review_summary
question: |
  Review Summary
subquestion: |
  <h2 class="h4">Reviews</h2>

  ${ collapse_template(what_are_reviews_template) }

  Interview file | Version | Number of reviews | Average Score
  -------------- |---------|-------------------|---------------
  % for review_agg in get_good_or_bad():
  ${ review_agg['interview'] } | ${ review_agg['version'] } | ${ review_agg['count'] } | ${ str(round(review_agg['average'] * 1000)/1000) }
  % endfor

  <h2 class="h4">Text Reviews</h2>

  % for interview, review_list in text_reviews.items():
  <h3 class="h5">In ${ interview }</h3>
  % for review in review_list:
  > ${ review['body'] }

  % if not review.get('html_url'):
  ${ action_button_html(prefill_github_issue_url(repo_name=interview.split(":")[0].replace(".", "-"), title="User feedback", body=review['body'], label=al_github_label), label="Make a github issue") }
  % else:
  [Link to Github issue](${ review.get('html_url') })
  % endif

  ---

  % endfor

  % endfor
---
template: what_are_reviews_template
subject: What are reviews?
content: |
  Reviews are a score that someone can give your interview. Think of a 1 to 5 star review, but the numbers
  are shifted. If you use `embedded_review.yml` in your
  interview, each score is a +1 for a thumbs up or a -1 for a thumbs down.
  
  These scores are saved completely
  anonymously, so below, we show the number of reviews given for an interview, and the average score given
  over all of the reviews. We split this up by version so you can see how different changes you have made
  affect people's reviews.
---
metadata:
  title: Browse Interview Feedback
  short title: Browse Feedback
  temporary session: True
  required privileges:
    - admin
---
if: ids
id: main browse screen
question: |
  Select feedback to browse
subquestion: |
  There are two main types of feedback:

  * feedback attached to Github Issues
  * feedback not attached to Github Issues (Reviews)
fields:
  - What type of feedback: feedback_type
    datatype: dropdown
    choices:
      Reviews: reviews
      Github issues: github_sessions
  - Session from Github issue: feedback_id
    datatype: dropdown
    choices:
      code: |
        ids
    show if:
      variable: feedback_type
      is: github_sessions
help:
  label: |
    View Panelists
  content: |
    ${ view_panelists }
---
if: not ids
code: |
  feedback_id = None
---
if: not ids
id: main browse screen, no data
question: |
  Select feedback to browse
fields:
  - What type of feedback: feedback_type
    datatype: dropdown
    choices:
      Reviews: reviews
      Feedback: github_sessions
help:
  label: |
    View Panelists
  content: |
    ${ view_panelists }
---
template: view_panelists
content: |
    % for email_and_time in potential_panelists():
    % if isinstance(email_and_time[0], bytes):
    * ${ email_and_time[0].decode('utf-8') }, at ${ email_and_time[1]}
    % else:
    * ${ str(panelist_email) }, at ${ email_and_time[1]}
    % endif
    % endfor
---
if: not ids
question: |
  No feedback to view
event: feedback_id
help:
  label: |
    View Panelists
  content: |
    ${ view_panelists }
---
code: |
  id_map = get_all_feedback_info()
---
code: |
  ids = {row_id: info['html_url'] if info.get('html_url') else (info.get('session_id') or '')
      for row_id, info in id_map.items() if info.get('html_url') or info.get('session_id')}
---
code: |
  text_review_list = [info for row_id, info in id_map.items() if not info.get('session_id')]
  text_reviews = {}
  for text_review in text_review_list:
    if text_review['interview'] in text_reviews:
      text_reviews[text_review['interview']].append(text_review)
    else:
      text_reviews[text_review['interview']] = [text_review]
---
event: open_session
code: |
  info = id_map[feedback_id]
  response(url=interview_url(i=info['interview'], session=info.get('session_id'), temporary=1))
---
code: |
  al_github_label = 'user feedback'